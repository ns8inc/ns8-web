<!DOCTYPE html>
<html>
<head>
    <% include ../partials/master/header %>
</head>

<body class="fixed-navigation">

<div id="wrapper">

    <% include partials/leftPanel %>

    <div id="page-wrapper" class="white-bg">

        <% include partials/topPanel %>

        <div class="wrapper wrapper-content">

            <% include ../partials/master/message %>
            <div class="row white-bg" style="min-height:900px">
                <div class="col-lg-12">
                    <h1>Getting Started</h1>
                    <br />
                    <h2>Tracking Website Data</h2>

                    To begin tracking data on a website, simply cut and paste the tracking script onto your pages.&nbsp; You place the tracking script in the HEAD block of your
                    pages.&nbsp; You can get the tracking script from the <a href="/setup/projects">Setup / Projects</a> menu item.  For example:
                    <br /><br />
<pre>
&lt;head&gt;
<i>place tracking script in HEAD block</i>
&lt;/head&gt;
</pre>
                    <br />
                    The script can track <b>sessions</b>, <b>pageviews</b> and <b>events</b>, depending on what you are interested in.

                    <br /><br /><h3>Script setup</h3>

                    <br /><i>The script has some setup code on top.&nbsp; Look for the following lines at the bottom of the script:</i>
                    <pre>var <%- application.branding.scriptName %> = new Aggregator(<b><i>your project id</i></b>);<br><%- application.branding.scriptName %>.logPageview();</pre>
                    <br />
                    You must make sure your project id is in the <b><i>project id</i></b> parameter.&nbsp; The best way to do this is to get the script from the
                    <a href="/setup/projects">Setup / Projects</a> menu and cut and paste it onto your pages.
                    <br /><br />
                    The part of the script that tracks a pageview is this:
                    <br /><br />
                    <pre><%- application.branding.scriptName %>.logPageview();</pre>
                    <br />
                    By default, this logs the current page, but you can track custom page names, if needed, by passing in a page name.&nbsp; For example:
                    <br /><br />
                    <pre><%- application.branding.scriptName %>.logPageview(<b>'mypagename.html'</b>);</pre>
                    <br />
                    To track an event, use the <b><%- application.branding.scriptName %>.logEvent</b> call.&nbsp; For example::
                    <br /><br />
                    <pre><%- application.branding.scriptName %>.logEvent('Purchase', { amount: 19.95 } );</pre>
                    <br />
                    For more details, see the topic on <a href="/developer/web/events">Tracking Events</a>.

                    <br /><br /><h3>Asynchronous loading</h3>
                    The tracking script never blocks.&nbsp; The script is loaded asynchronously and all commands are queued until the library is loaded.&nbsp; From a coding
                    point of view, you can utilize the full API, even offline, without having to account for blocking calls.
                </div>
            </div>
        </div>
        <% include ../partials/master/footer %>
    </div>
</div>

<% include ../partials/master/footerScripts %>

</body>
</html>
